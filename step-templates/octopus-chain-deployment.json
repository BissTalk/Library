{
    "Id": "18392835-d50e-4ce9-9065-8e15a3c30954",
    "Name": "Chain Deployment",
    "Description": "Triggers a deployment of another project in Octopus",
    "ActionType": "Octopus.Script",
    "Version": 14,
    "Properties": {
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.RunOnServer": "true",
        "Octopus.Action.Script.ScriptBody": "<#\r\n----- Chain Deployment -----\r\nAuthors & Credits\r\n    Paul Marston @paulmarsy (paul@marston.me)\r\n    Joe Waid @joewaid\r\n    Henrik Andersson @alfhenrik\r\n    Damian Brady @Damovisa\r\nLinks\r\n    https://library.octopus.com/step-templates/18392835-d50e-4ce9-9065-8e15a3c30954\r\n    https://github.com/OctopusDeploy/Library/commits/master/step-templates/octopus-chain-deployment.json\r\n\r\n----- Advanced Configuration Settings -----\r\nVariable names can use either of the following two formats: \r\n    Octopus.Action.<Setting Name> - will apply to all steps in the deployment, e.g.\r\n        Octopus.Action.DebugLogging\r\n    Octopus.Action[Step Name].<Setting Name> - will apply to 'step name' alone, e.g.\r\n        Octopus.Action[Provision Virtual Machine].DeploymentRetryCount\r\n\r\nAvailable Settings:\r\n    - DebugLogging - set to 'True' or 'False' to log all GET web requests\r\n    - GuidedFailureMessage - will change the note used when submitting guided failure actions, the following variables will be replaced in the text:\r\n        #{GuidedFailureActionIndex} - The current count of interrupts for that step e.g. 1\r\n        #{GuidedFailureAction} - The action being submitted by the step e.g. Retry\r\n    - DeploymentRetryCount - will override the number of times a deployment will be retried when unsuccessful and enable retrying when the failure option is set for a different option, default is 1\r\n    - StepRetryCount - will override the number of times a deployment step will be retried before before submitting Ignore or Abort, default is 1\r\n    - QueueTimeout - when scheduling a deployment for later a timeout must be provided, this allows a custom value, default is 30:00, format is hh:mm\r\n    - OctopusServerUrl - will override the base url used for all webrequests, making it possible to chain deployments on a different Octopus instance/server, or as a workaround for misconfigured node settings\r\n\r\n----- Changelog -----\r\n14. May 2, 2017 - Paul Marston @paulmarsy (paul@marston.me)\r\n    - Improved step parameter metadata & validation\r\n    - Added changelog, documentation of advanced settings and who can be contacted as a maintainer\r\n    - Supports deploying to multiple environments in one step by specifying a lifecycle phase name e.g. 'Dev'\r\n    - Automated retry of the entire deployment as an additional failure handling option\r\n    - Number of step/deployment retries is configurable using a settings variable\r\n    - Supports Octopus scheduled deployments (can be used for reoccuring scheduled deploys, or autonomous deployment retry)\r\n    - Individual tenants as well as tenant tags can be deployed to\r\n    - Fixing a bug where Guided Failure is always evaluated to true\r\n    - Improved identification of valid environment&tenant promotions by using the 'deployment template' api\r\n    - If a release version has already been created, it will be used\r\n    - Using 'Fail-Step' for better error logging\r\n    - Fixed a bug where log messages with an identical timestamp were repeatedly reported\r\n13. Apr 21, 2017 - Paul Marston @paulmarsy (paul@marston.me)\r\n    - Complete step template rewrite\r\n    - Improved logging\r\n        * Logs only written when chained deployment changes\r\n        * Progress of deployment step states is reported\r\n        * Errors & warnings are reported without interpretation in parent deployment\r\n        * Manual intervention & guided failure events are reported\r\n        * Queue position reported before deployment starts\r\n        * Verbose logging of useful API urls\r\n    - Multi-tenancy support and handling multiple tenant deploys from one chain step\r\n    - Support for skipping steps\r\n    - Support for prompted form variables\r\n    - Create release functionality supports using the version from the incremented version template or donor package\r\n    - Ability to snapshot update variables of a release before deploying\r\n    - Automated handling of guided failure scenarios e.g. retry on step failure, then abort if it errors a second time\r\n    - Transient Octopus API request failures are handled (e.g. we saw many deployments failing because of a request timeout)\r\n    - Post-deploy script support with variable substitution performed using the manifest variable set of the chained deployment with appropriate scoping applied (though not advanced scope specificity)\r\n    - Defaulting channel to a blank value which looks for one with 'IsDefault' set true\r\n    - Create release performs a simplified package version lookup to populate the 'SelectedPackages' field\r\n12. Mar 30, 2017 - Joe Waid @joewaid\r\n    - Pass the Environments \"Guided Failure\" setting\r\n    - Check status after deployment when Chain_WaitForDeployment is true\r\n11. Nov 21, 2016 - Henrik Andersson @alfhenrik\r\n    - Add Wait for deployment option to chain deployment step template\r\n10. May 2, 2016 - Damian Brady @Damovisa\r\n    - Add Chained Deployment step template\r\n#>\r\n#Requires -Version 5\r\n$ErrorActionPreference = 'Stop'\r\n$ProgressPreference = 'SilentlyContinue'\r\n\r\nfunction Test-String {\r\n    param([Parameter(Position=0)]$InputObject,[switch]$ForAbsence)\r\n\r\n    $hasNoValue = [System.String]::IsNullOrWhiteSpace($InputObject)\r\n    if ($ForAbsence) { $hasNoValue }\r\n    else { -not $hasNoValue }\r\n}\r\n\r\nfunction Get-OctopusSetting {\r\n    param([Parameter(Position = 0, Mandatory)][string]$Name, [Parameter(Position = 1, Mandatory)]$DefaultValue)\r\n    $formattedName = 'Octopus.Action.{0}' -f $Name\r\n    if ($OctopusParameters.ContainsKey($formattedName)) {\r\n        $value = $OctopusParameters[$formattedName]\r\n        if ($DefaultValue -is [int]) { return ([int]::Parse($value)) }\r\n        if ($DefaultValue -is [bool]) { return ([System.Convert]::ToBoolean($value)) }\r\n        if ($DefaultValue -is [array] -or $DefaultValue -is [hashtable] -or $DefaultValue -is [pscustomobject]) { return (ConvertFrom-Json -InputObject $value) }\r\n        return $value\r\n    }\r\n    else { return $DefaultValue }\r\n}\r\n\r\n# Write functions are re-defined using octopus service messages to preserve formatting of log messages received from the chained deployment and avoid errors being twice wrapped in an ErrorRecord\r\nfunction Write-Fatal($message, $exitCode = -1) {\r\n    if (Test-Path Function:\\Fail-Step) {\r\n        Fail-Step $message\r\n    }\r\n    else {\r\n        Write-Host ('##octopus[stdout-error]`n{0}' -f $message)\r\n        Exit $exitCode\r\n    }\r\n}\r\nfunction Write-Error($message) { Write-Host (\"##octopus[stdout-error]`n{0}`n##octopus[stdout-default]\" -f $message) }\r\nfunction Write-Warning($message) { Write-Host (\"##octopus[stdout-warning]`n{0}`n##octopus[stdout-default]\" -f $message) }\r\nfunction Write-Verbose($message) { Write-Host (\"##octopus[stdout-verbose]`n{0}`n##octopus[stdout-default]\" -f $message) }\r\n\r\n$Chain_BaseUrl = (Get-OctopusSetting OctopusServerUrl $OctopusParameters['Octopus.Web.BaseUrl']).Trim('/')\r\nif (Test-String $Chain_ApiKey -ForAbsence) {\r\n    Write-Fatal \"The step parameter 'API Key' was not found. This step requires an API Key to function, please provide one and try again.\"\r\n}\r\n$DebugLogging = Get-OctopusSetting DebugLogging $false\r\n\r\nfunction Invoke-OctopusApi {\r\n    param(\r\n        [Parameter(Position = 0, Mandatory)]$Uri,\r\n        [ValidateSet('Get', 'Post', 'Put')]$Method = 'Get',\r\n        $Body,\r\n        [switch]$GetErrorResponse\r\n    )\r\n    $requestParameters = @{\r\n        Uri = ('{0}/{1}' -f $Chain_BaseUrl, $Uri.TrimStart('/'))\r\n        Method = $Method\r\n        Headers = @{ 'X-Octopus-ApiKey' = $Chain_ApiKey }\r\n        UseBasicParsing = $true\r\n    }\r\n    if ($Method -ne 'Get' -or $DebugLogging) {\r\n        Write-Verbose ('{0} {1}' -f $Method.ToUpperInvariant(), $requestParameters.Uri)\r\n    }\r\n    if ($null -ne $Body) {\r\n        $requestParameters.Add('Body', (ConvertTo-Json -InputObject $Body -Depth 10))\r\n        Write-Verbose $requestParameters.Body\r\n    }\r\n    \r\n    $wait = 0\r\n    $webRequest = $null\r\n    while ($null -eq $webRequest) {\t\r\n        try {\r\n            $webRequest = Invoke-WebRequest @requestParameters\r\n        } catch {\r\n            if ($_.Exception -is [System.Net.WebException] -and $null -ne $_.Exception.Response) {\r\n                $errorResponse = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream()).ReadToEnd()\r\n                Write-Verbose ('Error Response:`n{0}' -f $errorResponse)\r\n                if ($GetErrorResponse) {\r\n                    return ($errorResponse | ConvertFrom-Json)\r\n                }\r\n                if ($_.Exception.Response.StatusCode -in @([System.Net.HttpStatusCode]::NotFound, [System.Net.HttpStatusCode]::InternalServerError, [System.Net.HttpStatusCode]::BadRequest, [System.Net.HttpStatusCode]::Unauthorized)) {\r\n                    Write-Fatal $_.Exception.Message\r\n                }\r\n            }\r\n            if ($wait -eq 120) {\r\n                Write-Fatal ('Maximum number of retries exceeded`n{0}' -f $_.Exception.Message) -43\r\n            }\r\n            $wait = switch ($wait) {\r\n                0 { 30 }\r\n                30 { 60 }\r\n                60 { 120 }\r\n            }\r\n            Write-Warning ('Octopus web request ({0}: {1}) failed & will be retried in $wait seconds:`n{2}' -f $Method.ToUpperInvariant(), $requestParameters.Uri, $_.Exception.Message)\r\n            Start-Sleep -Seconds $wait\r\n        }\r\n    }\r\n    $webRequest.Content | ConvertFrom-Json | Write-Output\r\n}\r\n\r\nenum GuidedFailure {\r\n    Default\r\n    Enabled\r\n    Disabled\r\n    RetryIgnore\r\n    RetryAbort\r\n    Ignore\r\n    RetryDeployment\r\n}\r\n\r\nclass DeploymentContext {\r\n    hidden $BaseUrl\r\n\r\n    DeploymentContext($baseUrl) {\r\n        $this.BaseUrl = $baseUrl\r\n    }\r\n\r\n    hidden $Project\r\n    hidden $Lifecycle\r\n    [void] SetProject($projectName) {\r\n        $this.Project = Invoke-OctopusApi '/api/projects/all' | ? Name -eq $projectName\r\n        if ($null -eq $this.Project) {\r\n            Write-Fatal \"Project $projectName not found\"\r\n        }\r\n        Write-Host \"Project: $($this.Project.Name)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)$($this.Project.Links.Self)\"\r\n        \r\n        $this.Lifecycle = Invoke-OctopusApi ('/api/lifecycles/{0}' -f $this.Project.LifecycleId)\r\n        Write-Host \"Project Lifecycle: $($this.Lifecycle.Name)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)$($this.Lifecycle.Links.Self)\"\r\n    }\r\n    \r\n    hidden $Channel\r\n    [void] SetChannel($channelName) {\r\n        $useDefaultChannel = Test-String $channelName -ForAbsence\r\n        $this.Channel = Invoke-OctopusApi $this.Project.Links.Channels | % Items | ? { $useDefaultChannel -and $_.IsDefault -or $_.Name -eq $channelName }\r\n        if ($null -eq $this.Channel) {\r\n            Write-Fatal \"$(if ($useDefaultChannel) { 'Default channel' } else { \"Channel $channelName\" }) not found\"\r\n        }\r\n        Write-Host \"Channel: $($this.Channel.Name)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)$($this.Channel.Links.Self)\"\r\n\r\n        if ($null -ne $this.Channel.LifecycleId) {\r\n            $this.Lifecycle = Invoke-OctopusApi ('/api/lifecycles/{0}' -f $this.Channel.LifecycleId)\r\n            Write-Host \"Channel Lifecycle: $($this.Lifecycle.Name)\"\r\n            Write-Verbose \"`t$($this.BaseUrl)$($this.Lifecycle.Links.Self)\"        \r\n        }\r\n    }\r\n\r\n    hidden $Release\r\n    [void] SetRelease($releaseVersion) {\r\n        if (Test-String $releaseVersion) {\r\n           $this.Release = Invoke-OctopusApi ('/api/projects/{0}/releases/{1}' -f $this.Project.Id, $releaseVersion) -GetErrorResponse\r\n            if ($null -ne $this.Release.ErrorMessage) {\r\n                Write-Fatal $this.Release.ErrorMessage\r\n            }\r\n        }\r\n        else {\r\n            $this.Release = Invoke-OctopusApi $this.Channel.Links.Releases | % Items | Select-Object -First 1\r\n            if ($null -eq $this.Release) {\r\n                Write-Fatal \"There are no releases for channel $($this.Channel.Name)\"\r\n            }\r\n        }\r\n        Write-Host \"Release: $($this.Release.Version)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)/api/releases/$($this.Release.Id)\"\r\n    }\r\n    [void] CreateRelease($releaseVersion) {\r\n        $template = Invoke-OctopusApi ('{0}/template?channel={1}' -f $this.Project.Links.DeploymentProcess, $this.Channel.Id)\r\n        $selectedPackages = @()\r\n        Write-Host \"Resolving package versions...\"\r\n        $template.Packages | % {\r\n            $preReleaseTag = $this.Channel.Rules | ? Actions -contains $_.StepName | ? { $null -ne $_ } | % { '&preReleaseTag={0}' -f $_.Tag }\r\n\r\n            $package = Invoke-OctopusApi ('/api/feeds/{0}/packages?packageId={1}&partialMatch=false&includeMultipleVersions=false&includeNotes=false&includePreRelease=true&take=1{2}' -f $_.FeedId, $_.PackageId, $preReleaseTag)\r\n\r\n            Write-Host \"Found $($package.Title) @ $($package.Version) for step $($_.StepName)\"\r\n            $selectedPackages += @{\r\n                StepName = $_.StepName\r\n                Version = $package.Version\r\n            }\r\n\r\n            if ((Test-String $releaseVersion -ForAbsence) -and $_.StepName -eq $template.VersioningPackageStepName) {\r\n                Write-Host \"Release will be created using the version number from package step $($template.VersioningPackageStepName): $($package.Version)\"\r\n                $releaseVersion = $package.Version\r\n            }\r\n        }\r\n        if (Test-String $releaseVersion) {\r\n            $this.Release = Invoke-OctopusApi ('/api/projects/{0}/releases/{1}' -f $this.Project.Id, $releaseVersion) -GetErrorResponse\r\n            if ($null -eq $this.Release.ErrorMessage -and $this.Release.Version -ieq $releaseVersion) {\r\n                Write-Host \"Release version $($this.Release.Version) has already been created, selecting it for deployment\"\r\n                Write-Verbose \"`t$($this.BaseUrl)/api/releases/$($this.Release.Id)\"\r\n                return\r\n            }\r\n        }\r\n        else {\r\n            Write-Host \"Release will be created using the incremented release version: $($template.NextVersionIncrement)\"\r\n            $releaseVersion = $template.NextVersionIncrement\r\n        }\r\n\r\n        $this.Release = Invoke-OctopusApi '/api/releases?ignoreChannelRules=false' -Method Post -Body @{\r\n            ProjectId = $this.Project.Id\r\n            ChannelId = $this.Channel.Id \r\n            Version = $releaseVersion\r\n            SelectedPackages = $selectedPackages\r\n        } -GetErrorResponse\r\n        if ($null -ne $this.Release.ErrorMessage) {\r\n            Write-Fatal \"$($this.Release.ErrorMessage)`n$($this.Release.Errors -join \"`n\")\"\r\n        }\r\n        Write-Host \"Release $($this.Release.Version) has been successfully created\"\r\n        Write-Verbose \"`t$($this.BaseUrl)/api/releases/$($this.Release.Id)\"\r\n    }\r\n\r\n    [void] UpdateVariableSnapshot() {\r\n        $this.Release = Invoke-OctopusApi $this.Release.Links.SnapshotVariables -Method Post\r\n        Write-Host \"Variables snapshot update performed. The release now references the latest variables.\"\r\n    }\r\n\r\n    hidden $DeploymentTemplate\r\n    [void] GetDeploymentTemplate() {\r\n        Write-Host \"Getting deployment template for release...\"\r\n        $this.DeploymentTemplate = Invoke-OctopusApi $this.Release.Links.DeploymentTemplate\r\n    }\r\n\r\n    hidden [bool]$UseGuidedFailure\r\n    hidden [string[]]$GuidedFailureActions\r\n    hidden [string]$GuidedFailureMessage\r\n    hidden [int]$DeploymentRetryCount\r\n    [void] SetGuidedFailure([GuidedFailure]$guidedFailure, $guidedFailureMessage) {\r\n        $this.UseGuidedFailure = switch ($guidedFailure) {\r\n            ([GuidedFailure]::Default) { [System.Convert]::ToBoolean($global:OctopusUseGuidedFailure) }\r\n            ([GuidedFailure]::Enabled) { $true }\r\n            ([GuidedFailure]::Disabled) { $false }\r\n            ([GuidedFailure]::RetryIgnore) { $true }\r\n            ([GuidedFailure]::RetryAbort) { $true }\r\n            ([GuidedFailure]::Ignore) { $true } \r\n            ([GuidedFailure]::RetryDeployment) { $false }\r\n        }\r\n        Write-Host \"Setting Guided Failure: $($this.UseGuidedFailure)\"\r\n        \r\n        $retryActions = @(1..(Get-OctopusSetting StepRetryCount 1) | % {'Retry'})\r\n        $this.GuidedFailureActions = switch ($guidedFailure) {\r\n            ([GuidedFailure]::Default) { $null }\r\n            ([GuidedFailure]::Enabled) { $null }\r\n            ([GuidedFailure]::Disabled) { $null }\r\n            ([GuidedFailure]::RetryIgnore) { $retryActions + @('Ignore') }\r\n            ([GuidedFailure]::RetryAbort) { $retryActions + @('Abort') }\r\n            ([GuidedFailure]::Ignore) { @('Ignore') }\r\n            ([GuidedFailure]::RetryDeployment) { $null }\r\n        }\r\n        if ($null -ne $this.GuidedFailureActions) {\r\n            Write-Host \"Automated Failure Guidance: $($this.GuidedFailureActions -join '; ') \"\r\n        }\r\n        $this.GuidedFailureMessage = $guidedFailureMessage\r\n        \r\n        $defaultRetries = if ($guidedFailure -eq [GuidedFailure]::RetryDeployment) { 1 } else { 0 }\r\n        $this.DeploymentRetryCount = Get-OctopusSetting DeploymentRetries $defaultRetries\r\n        if ($this.DeploymentRetryCount -ne 0) {\r\n            Write-Host \"Failed Deployments will be retried #$($this.DeploymentRetryCount) times\"\r\n        }\r\n    }\r\n        \r\n    [bool]$WaitForDeployment\r\n    hidden [datetime]$QueueTime\r\n    hidden [datetime]$QueueTimeExpiry\r\n    [void] SetSchedule($deploySchedule) {\r\n        if (Test-String $deploySchedule -ForAbsence) {\r\n            Write-Fatal \"The deployment schedule step parameter was not found.\"\r\n        }\r\n        if ($deploySchedule -eq 'WaitForDeployment') {\r\n            $this.WaitForDeployment = $true\r\n            Write-Host \"Deployment will be queued to start immediatley...\"\r\n            return\r\n        }\r\n        $this.WaitForDeployment = $false\r\n        if ($deploySchedule -eq 'NoWait') {\r\n            Write-Host \"Deployment will be queued to start immediatley...\"\r\n            return\r\n        }\r\n        <#\r\n            ^(?i) - Case-insensitive matching\r\n            (?:\r\n                (?<Day>MON|TUE|WED|THU|FRI|SAT|SUN)? - Capture an optional day\r\n                \\s*@\\s* - '@' indicates deploying at a specific time\r\n                (?<TimeOfDay>(?:[01]?[0-9]|2[0-3]):[0-5][0-9]) - Captures the time of day, in 24 hour format\r\n            )? - Day & TimeOfDay are optional\r\n            \\s*\r\n            (?:\r\n                \\+\\s* - '+' indicates deploying after a length of tie\r\n                (?<TimeSpan>\r\n                    \\d{1,3} - Match 1 to 3 digits\r\n                    (?::[0-5][0-9])? - Optionally match a colon and 00 to 59, this denotes if the previous 1-3 digits are hours or minutes\r\n                )\r\n            )?$ - TimeSpan is optional\r\n        #>\r\n        $parsedSchedule = [regex]::Match($deploySchedule, '^(?i)(?:(?<Day>MON|TUE|WED|THU|FRI|SAT|SUN)?\\s*@\\s*(?<TimeOfDay>(?:[01]?[0-9]|2[0-3]):[0-5][0-9]))?\\s*(?:\\+\\s*(?<TimeSpan>\\d{1,3}(?::[0-5][0-9])?))?$')\r\n        if (!$parsedSchedule.Success) {\r\n            Write-Fatal \"The deployment schedule step parameter contains an invalid value. Valid values are 'WaitForDeployment', 'NoWait' or a schedule in the format '[[DayOfWeek] @ HH:mm] [+ <MMM|HHH:MM>]'\" \r\n        }\r\n        $this.QueueTime = Get-Date\r\n        if ($parsedSchedule.Groups['Day'].Success) {\r\n            Write-Verbose \"Parsed Day: $($parsedSchedule.Groups['Day'].Value)\"\r\n            while (!$this.QueueTime.DayOfWeek.ToString().StartsWith($parsedSchedule.Groups['Day'].Value)) {\r\n                $this.QueueTime = $this.QueueTime.AddDays(1)\r\n            }\r\n        }\r\n        if ($parsedSchedule.Groups['TimeOfDay'].Success) {\r\n            Write-Verbose \"Parsed Time Of Day: $($parsedSchedule.Groups['TimeOfDay'].Value)\"\r\n            $timeOfDay = [datetime]::ParseExact($parsedSchedule.Groups['TimeOfDay'].Value, 'HH:mm', $null)\r\n            $this.QueueTime = $this.QueueTime.Date + $timeOfDay.TimeOfDay\r\n        }\r\n        if ($parsedSchedule.Groups['TimeSpan'].Success) {\r\n            Write-Verbose \"Parsed Time Span: $($parsedSchedule.Groups['TimeSpan'].Value)\"\r\n            $timeSpan = $parsedSchedule.Groups['TimeSpan'].Value.Split(':')\r\n            $hoursToAdd = if ($timeSpan.Length -eq 2) {$timeSpan[0]} else {0}\r\n            $minutesToAdd = if ($timeSpan.Length -eq 2) {$timeSpan[1]} else {$timeSpan[0]}\r\n            $this.QueueTime = $this.QueueTime.Add((New-TimeSpan -Hours $hoursToAdd -Minutes $minutesToAdd))\r\n        }\r\n        Write-Host \"Deployment will be queued to start at: $($this.QueueTime.ToLongDateString()) $($this.QueueTime.ToLongTimeString())\"\r\n        Write-Verbose \"Local Time: $($this.QueueTime.ToLocalTime().ToString('r'))\"\r\n        Write-Verbose \"Universal Time: $($this.QueueTime.ToUniversalTime().ToString('o'))\"\r\n        $this.QueueTimeExpiry = $this.QueueTime.Add([timespan]::ParseExact((Get-OctopusSetting QueueTimeout '00:30'), \"hh\\:mm\", $null))\r\n        Write-Verbose \"Queued deployment will expire on: $($this.QueueTimeExpiry.ToUniversalTime().ToString('o'))\"\r\n    }\r\n\r\n    hidden $Environments\r\n    [void] SetEnvironment($environmentName) {\r\n        $lifecyclePhaseEnvironments = $this.Lifecycle.Phases | ? Name -eq $environmentName | % {\r\n            $_.AutomaticDeploymentTargets\r\n            $_.OptionalDeploymentTargets\r\n        }\r\n        $this.Environments = $this.DeploymentTemplate.PromoteTo | ? { $_.Id -in $lifecyclePhaseEnvironments -or $_.Name -ieq $environmentName }\r\n        if ($null -eq $this.Environments) {\r\n            Write-Fatal \"The specified environment ($environmentName) was not found or not eligible for deployment of the release ($($this.Release.Version)). Verify that the release has been deployed to all required environments before it can be promoted to this environment. Once you have corrected these problems you can try again.\" \r\n        }\r\n        Write-Host \"Environments: $(($this.Environments | % Name) -join ', ')\"\r\n    }\r\n    \r\n    [bool] $IsTenanted\r\n    hidden $Tenants\r\n    [void] SetTenants($tenantFilter) {\r\n        $this.IsTenanted = Test-String $tenantFilter\r\n        if (!$this.IsTenanted) {\r\n            return\r\n        }\r\n        $tenantPromotions = $this.DeploymentTemplate.TenantPromotions | % Id\r\n        $this.Tenants = $tenantFilter.Split(\"`n\") | % { [uri]::EscapeUriString($_.Trim()) } | % {\r\n            $criteria = if ($_ -like '*/*') { 'tags' } else { 'name' }\r\n            \r\n            $tenantResults = Invoke-OctopusApi ('/api/tenants/all?projectId={0}&{1}={2}' -f $this.Project.Id, $criteria, $_) -GetErrorResponse\r\n            if ($tenantResults -isnot [array] -and $tenantResults.ErrorMessage) {\r\n                Write-Warning \"Full Exception: $($tenantResults.FullException)\"\r\n                Write-Fatal $tenantResults.ErrorMessage\r\n            }\r\n            $tenantResults\r\n        } | ? Id -in $tenantPromotions\r\n\r\n        if ($null -eq $this.Tenants) {\r\n            Write-Fatal \"No eligible tenants found for deployment of the release ($($this.Release.Version)). Verify that the tenants have been associated with the project.\"\r\n        }\r\n        Write-Host \"Tenants: $(($this.Tenants | % Name) -join ', ')\"\r\n    }\r\n\r\n    [DeploymentController[]] GetDeploymentControllers() {\r\n        Write-Verbose \"Determining eligible environments & tenants. Retrieving deployment previews...\"\r\n        $deploymentControllers = @()\r\n        foreach ($environment in $this.Environments) {\r\n            $envPrefix = if ($this.Environments.Count -gt 1) {$environment.Name}\r\n            if ($this.IsTenanted) {\r\n                foreach ($tenant in $this.Tenants) {\r\n                    $tenantPrefix = if ($this.Tenants.Count -gt 1) {$tenant.Name}\r\n                    if ($this.DeploymentTemplate.TenantPromotions | ? Id -eq $tenant.Id | % PromoteTo | ? Id -eq $environment.Id) {\r\n                        $logPrefix = ($envPrefix,$tenantPrefix | ? { $null -ne $_ }) -join '::'\r\n                        $deploymentControllers += [DeploymentController]::new($this, $logPrefix, $environment, $tenant)\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                $deploymentControllers += [DeploymentController]::new($this, $envPrefix, $environment, $null)\r\n            }\r\n        }\r\n        return $deploymentControllers\r\n    }\r\n}\r\n\r\nclass DeploymentController {\r\n    hidden [string]$BaseUrl\r\n    hidden [DeploymentContext]$DeploymentContext\r\n    hidden [string]$LogPrefix\r\n    hidden [object]$Environment\r\n    hidden [object]$Tenant\r\n    hidden [object]$DeploymentPreview\r\n    hidden [int]$DeploymentRetryCount\r\n    hidden [int]$DeploymentAttempt\r\n    \r\n    DeploymentController($deploymentContext, $logPrefix, $environment, $tenant) {\r\n        $this.BaseUrl = $deploymentContext.BaseUrl\r\n        $this.DeploymentContext = $deploymentContext\r\n        if (Test-String $logPrefix) {\r\n            $this.LogPrefix = \"[${logPrefix}] \"\r\n        }\r\n        $this.Environment = $environment\r\n        $this.Tenant = $tenant\r\n        if ($tenant) {\r\n            $this.DeploymentPreview = Invoke-OctopusApi ('/api/releases/{0}/deployments/preview/{1}/{2}' -f $this.DeploymentContext.Release.Id, $this.Environment.Id, $this.Tenant.Id)\r\n        }\r\n        else {\r\n            $this.DeploymentPreview = Invoke-OctopusApi ('/api/releases/{0}/deployments/preview/{1}' -f $this.DeploymentContext.Release.Id, $this.Environment.Id)\r\n        }\r\n        $this.DeploymentRetryCount = $deploymentContext.DeploymentRetryCount\r\n        $this.DeploymentAttempt = 0\r\n    }\r\n\r\n    hidden [string[]]$SkipActions = @()\r\n    [void] SetStepsToSkip($stepsToSkip) {\r\n        $comparisonArray = $stepsToSkip.Split(\"`n\") | % Trim\r\n        $this.SkipActions = $this.DeploymentPreview.StepsToExecute | ? {\r\n            $_.CanBeSkipped -and ($_.ActionName -in $comparisonArray -or $_.ActionNumber -in $comparisonArray)\r\n        } | % {\r\n            $logMessage = \"Skipping Step $($_.ActionNumber): $($_.ActionName)\"\r\n            if ($this.LogPrefix) { Write-Verbose \"$($this.LogPrefix)$logMessage\" }\r\n            else { Write-Host $logMessage }\r\n            $_.ActionId\r\n        }\r\n    }\r\n\r\n    hidden [hashtable]$FormValues\r\n    [void] SetFormValues($formValuesToSet) {\r\n        $this.FormValues = @{}\r\n        $this.DeploymentPreview.Form.Values | Get-Member -MemberType NoteProperty | % {\r\n            $this.FormValues.Add($_.Name, $this.DeploymentPreview.Form.Values.$($_.Name))\r\n        }\r\n\r\n        $formValuesToSet.Split(\"`n\") | % {\r\n            $entry = $_.Split('=') | % Trim\r\n            $this.DeploymentPreview.Form.Elements | ? { $_.Control.Name -ieq $entry[0] } | % {\r\n                $logMessage = \"Setting Form Value '$($_.Control.Label)' to: $($entry[1])\"\r\n                if ($this.LogPrefix) { Write-Verbose \"$($this.LogPrefix)$logMessage\" }\r\n                else { Write-Host $logMessage }\r\n                $this.FormValues[$_.Name] = $entry[1]\r\n            }\r\n        }\r\n    }\r\n\t\r\n    [ServerTask]$Task\r\n    [void] Start() {\r\n        $request = @{\r\n            ReleaseId = $this.DeploymentContext.Release.Id\r\n            EnvironmentId = $this.Environment.Id\r\n            SkipActions = $this.SkipActions\r\n            FormValues = $this.FormValues\r\n            UseGuidedFailure = $this.DeploymentContext.UseGuidedFailure\r\n        }\r\n        if ($this.DeploymentContext.QueueTime -ne [datetime]::MinValue) { $request.Add('QueueTime', $this.DeploymentContext.QueueTime.ToUniversalTime().ToString('o')) }\r\n        if ($this.DeploymentContext.QueueTimeExpiry -ne [datetime]::MinValue) { $request.Add('QueueTimeExpiry', $this.DeploymentContext.QueueTimeExpiry.ToUniversalTime().ToString('o')) }\r\n        if ($this.Tenant) { $request.Add('TenantId', $this.Tenant.Id) }\r\n\r\n        $deployment = Invoke-OctopusApi '/api/deployments' -Method Post -Body $request -GetErrorResponse\r\n        if ($deployment.ErrorMessage) { Write-Fatal \"$($deployment.ErrorMessage)`n$($deployment.Errors -join \"`n\")\" }\r\n        Write-Host \"Queued $($deployment.Name)...\"\r\n        Write-Host \"`t$($this.BaseUrl)$($deployment.Links.Web)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)$($deployment.Links.Self)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)/api/deploymentprocesses/$($deployment.DeploymentProcessId)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)$($deployment.Links.Variables)\"\r\n        Write-Verbose \"`t$($this.BaseUrl)$($deployment.Links.Task)/details\"\r\n\r\n        $this.Task = [ServerTask]::new($this.DeploymentContext, $deployment, $this.LogPrefix)\r\n    }\r\n\r\n    [bool] PollCheck() {\r\n        $this.Task.Poll()\r\n        if ($this.Task.IsCompleted -and !$this.Task.FinishedSuccessfully -and $this.DeploymentAttempt -lt $this.DeploymentRetryCount) {\r\n            $this.DeploymentAttempt++\r\n            Write-Error \"$($this.LogPrefix)Deployment failed. Queuing retry #$($this.DeploymentAttempt) of $($this.DeploymentRetryCount)...\"\r\n            $this.Start()\r\n            return $true\r\n        }\r\n        return !$this.Task.IsCompleted\r\n    }\r\n}\r\n\r\nclass ServerTask {\r\n    hidden [DeploymentContext]$DeploymentContext\r\n    hidden [object]$Deployment\r\n    hidden [string]$LogPrefix\r\n\r\n    hidden [bool] $IsCompleted = $false\r\n    hidden [bool] $FinishedSuccessfully\r\n    hidden [string] $ErrorMessage\r\n    \r\n    hidden [int]$PollCount = 0\r\n    hidden [bool]$HasInterruptions = $false\r\n    hidden [hashtable]$State = @{}\r\n    hidden [System.Collections.Generic.HashSet[string]]$Logs\r\n \r\n    ServerTask($deploymentContext, $deployment, $logPrefix) {\r\n        $this.DeploymentContext = $deploymentContext\r\n        $this.Deployment = $deployment\r\n        $this.LogPrefix = $logPrefix\r\n        $this.Logs = [System.Collections.Generic.HashSet[string]]::new()\r\n    }\r\n    \r\n    [void] Poll() {\t\r\n        if ($this.IsCompleted) { return }\r\n\r\n        $details = Invoke-OctopusApi ('/api/tasks/{0}/details?verbose=false&tail=20' -f $this.Deployment.TaskId)\r\n        $this.IsCompleted = $details.Task.IsCompleted\r\n        $this.FinishedSuccessfully = $details.Task.FinishedSuccessfully\r\n        $this.ErrorMessage = $details.Task.ErrorMessage\r\n\r\n        $this.PollCount++\r\n        if ($this.PollCount % 10 -eq 0) {\r\n            $this.Verbose(\"$($details.Task.State). $($details.Task.Duration), $($details.Progress.EstimatedTimeRemaining)\")\r\n        }\r\n        \r\n        if ($details.Task.HasPendingInterruptions) { $this.HasInterruptions = $true }\r\n        $this.LogQueuePosition($details.Task)\r\n        $activityLogs = $this.FlattenActivityLogs($details.ActivityLogs)    \r\n        $this.WriteLogMessages($activityLogs)\r\n    }\r\n\r\n    hidden [bool] IfNewState($firstKey, $secondKey, $value) {\r\n        $key = \"{0}/{1}\" -f $firstKey, $secondKey\r\n        $containsKey = $this.State.ContainsKey($key)\r\n        if ($containsKey) { return $false }\r\n        $this.State[$key] = $value\r\n        return $true\r\n    }\r\n\r\n    hidden [bool] HasChangedState($firstKey, $secondKey, $value) {\r\n        $key = \"{0}/{1}\" -f $firstKey, $secondKey\r\n        $hasChanged = if (!$this.State.ContainsKey($key)) { $true } else { $this.State[$key] -ne $value }\r\n         if ($hasChanged) {\r\n            $this.State[$key] = $value\r\n         }\r\n         return $hasChanged\r\n    }\r\n\r\n    hidden [object] GetState($firstKey, $secondKey) { return $this.State[(\"{0}/{1}\" -f $firstKey, $secondKey)] }\r\n\r\n    hidden [void] ResetState($firstKey, $secondKey) { $this.State.Remove((\"{0}/{1}\" -f $firstKey, $secondKey)) }\r\n\r\n    hidden [void] Error($message) { Write-Error \"$($this.LogPrefix)${message}\" }\r\n    hidden [void] Warn($message) { Write-Warning \"$($this.LogPrefix)${message}\" }\r\n    hidden [void] Host($message) { Write-Host \"$($this.LogPrefix)${message}\" }   \r\n    hidden [void] Verbose($message) { Write-Verbose \"$($this.LogPrefix)${message}\" }\r\n\r\n    hidden [psobject[]] FlattenActivityLogs($ActivityLogs) {\r\n        $flattenedActivityLogs = {@()}.Invoke()\r\n        $this.FlattenActivityLogs($ActivityLogs, $null, $flattenedActivityLogs)\r\n        return $flattenedActivityLogs\r\n    }\r\n\r\n    hidden [void] FlattenActivityLogs($ActivityLogs, $Parent, $flattenedActivityLogs) {\r\n        foreach ($log in $ActivityLogs) {\r\n            $log | Add-Member -MemberType NoteProperty -Name Parent -Value $Parent\r\n            $insertBefore = $null -eq $log.Parent -and $log.Status -eq 'Running'\t\r\n            if ($insertBefore) { $flattenedActivityLogs.Add($log) }\r\n            foreach ($childLog in $log.Children) {\r\n                $this.FlattenActivityLogs($childLog, $log, $flattenedActivityLogs)\r\n            }\r\n            if (!$insertBefore) { $flattenedActivityLogs.Add($log) }\r\n        }\r\n    }\r\n\r\n    hidden [void] LogQueuePosition($Task) {\r\n        if ($Task.HasBeenPickedUpByProcessor) {\r\n            $this.ResetState($Task.Id, 'QueuePosition')\r\n            return\r\n        }\r\n\t\t\r\n        $queuePosition = (Invoke-OctopusApi ('/api/tasks/{0}/queued-behind' -f $this.Deployment.TaskId)).Items.Count\r\n        if ($this.HasChangedState($Task.Id, 'QueuePosition', $queuePosition) -and $queuePosition -ne 0) {\r\n            $this.Host(\"Queued behind $queuePosition tasks...\")\r\n        }\r\n    }\r\n\r\n    hidden [void] WriteLogMessages($ActivityLogs) {\r\n        $interrupts = if ($this.HasInterruptions) {\r\n            Invoke-OctopusApi ('/api/interruptions?regarding={0}' -f $this.Deployment.TaskId) | % Items\r\n        }\r\n        foreach ($activity in $ActivityLogs) {\r\n            $correlatedInterrupts = $interrupts | ? CorrelationId -eq $activity.Id         \r\n            $correlatedInterrupts | ? IsPending -eq $false | % { $this.LogInterruptMessages($activity, $_) }\r\n\r\n            $this.LogStepTransition($activity)         \r\n            $this.LogErrorsAndWarnings($activity)\r\n            $correlatedInterrupts | ? IsPending -eq $true | % { \r\n                $this.LogInterruptMessages($activity, $_)\r\n                $this.HandleInterrupt($_)\r\n            }\r\n        }\r\n    }\r\n\r\n    hidden [void] LogStepTransition($ActivityLog) {\r\n        if ($ActivityLog.ShowAtSummaryLevel -and $ActivityLog.Status -ne 'Pending') {\r\n            $existingState = $this.GetState($ActivityLog.Id, 'Status')\r\n            if ($this.HasChangedState($ActivityLog.Id, 'Status', $ActivityLog.Status)) {\r\n                $existingStateText = if ($existingState) {  \"$existingState -> \" }\r\n                $this.Host(\"$($ActivityLog.Name) ($existingStateText$($ActivityLog.Status))\")\r\n            }\r\n        }\r\n    }\r\n\r\n    hidden [void] LogErrorsAndWarnings($ActivityLog) {\r\n        foreach ($logEntry in $ActivityLog.LogElements) {\r\n            if ($logEntry.Category -eq 'Info') { continue }\r\n            if ($this.Logs.Add(($ActivityLog.Id,$logEntry.OccurredAt,$logEntry.MessageText -join '/'))) {\r\n                switch ($logEntry.Category) {\r\n                    'Fatal' {\r\n                        if ($ActivityLog.Parent) {\r\n                            $this.Error(\"FATAL: During $($ActivityLog.Parent.Name)\")\r\n                            $this.Error(\"FATAL: $($logEntry.MessageText)\")\r\n                        }\r\n                    }\r\n                    'Error' { $this.Error(\"[$($ActivityLog.Parent.Name)] $($logEntry.MessageText)\") }\r\n                    'Warning' { $this.Warn(\"[$($ActivityLog.Parent.Name)] $($logEntry.MessageText)\") }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    hidden [void] LogInterruptMessages($ActivityLog, $Interrupt) {\r\n        $message = $Interrupt.Form.Elements | ? Name -eq Instructions | % Control | % Text\r\n        if ($Interrupt.IsPending -and $this.HasChangedState($Interrupt.Id, $ActivityLog.Parent.Name, $message)) {\r\n            $this.Warn(\"Deployment is paused at '$($ActivityLog.Parent.Name)' for manual intervention: $message\")\r\n        }\r\n        if ($null -ne $Interrupt.ResponsibleUserId -and $this.HasChangedState($Interrupt.Id, 'ResponsibleUserId', $Interrupt.ResponsibleUserId)) {\r\n            $user = Invoke-OctopusApi $Interrupt.Links.User\r\n            $emailText = if (Test-String $user.EmailAddress) { '({0})' -f $user.EmailAddress }\r\n            $this.Warn(\"{0}{1} has taken responsibility for the manual intervention\" -f $user.DisplayName, $emailText)\r\n        }\r\n        $manualAction = $Interrupt.Form.Values.Result\r\n        if ((Test-String $manualAction) -and $this.HasChangedState($Interrupt.Id, 'Action', $manualAction)) {\r\n            $this.Warn(\"Manual intervention action '$manualAction' submitted with notes: $($Interrupt.Form.Values.Notes)\")\r\n        }\r\n        $guidanceAction = $Interrupt.Form.Values.Guidance\r\n        if ((Test-String $guidanceAction) -and $this.HasChangedState($Interrupt.Id, 'Action', $guidanceAction)) {\r\n            $this.Warn(\"Failure guidance to '$guidanceAction' submitted with notes: $($Interrupt.Form.Values.Notes)\")\r\n        }\r\n    }\r\n\r\n    hidden [void] HandleInterrupt($Interrupt) {\r\n        $isGuidedFailure = $null -ne ($Interrupt.Form.Elements | ? Name -eq Guidance)\r\n        if (!$isGuidedFailure -or !$this.DeploymentContext.GuidedFailureActions -or !$Interrupt.IsPending) {\r\n            return\r\n        }\r\n        $this.IfNewState($Interrupt.CorrelationId, 'ActionIndex', 0)\r\n        if ($Interrupt.CanTakeResponsibility -and $null -eq $Interrupt.ResponsibleUserId) {\r\n            Invoke-OctopusApi $Interrupt.Links.Responsible -Method Put\r\n        }\r\n        if ($Interrupt.HasResponsibility) {\r\n            $guidanceIndex = $this.GetState($Interrupt.CorrelationId, 'ActionIndex')\r\n            $guidance = $this.DeploymentContext.GuidedFailureActions[$guidanceIndex]\r\n            $guidanceIndex++\r\n            \r\n            Invoke-OctopusApi $Interrupt.Links.Submit -Body @{\r\n                Notes = $this.DeploymentContext.GuidedFailureMessage.Replace('#{GuidedFailureActionIndex}', $guidanceIndex).Replace('#{GuidedFailureAction}', $guidance)\r\n                Guidance = $guidance\r\n            } -Method Post\r\n\r\n            $this.HasChangedState($Interrupt.CorrelationId, 'ActionIndex', $guidanceIndex)\r\n        }\r\n    }\r\n}\r\n\r\nfunction Show-Heading {\r\n    param($Text)\r\n    $padding = ' ' * ((80 - 2 - $Text.Length) / 2)\r\n    Write-Host \" `n\"\r\n    Write-Host (@(\"`t\", ([string][char]0x2554), (([string][char]0x2550) * 80), ([string][char]0x2557)) -join '')\r\n    Write-Host \"`t$(([string][char]0x2551))$padding $Text $padding$([string][char]0x2551)\"  \r\n    Write-Host (@(\"`t\", ([string][char]0x255A), (([string][char]0x2550) * 80), ([string][char]0x255D)) -join '')\r\n    Write-Host \" `n\"\r\n}\r\n\r\nif ($OctopusParameters['Octopus.Action.RunOnServer'] -ieq 'False') {\r\n    Write-Warning \"For optimal performance use 'Run On Server' for this action\"\r\n}\r\n\r\n$deploymentContext = [DeploymentContext]::new($Chain_BaseUrl)\r\n\r\nif ($Chain_CreateOption -ieq 'True') {\r\n    Show-Heading 'Creating Release'\r\n}\r\nelse {\r\n    Show-Heading 'Retrieving Release'\r\n}\r\n$deploymentContext.SetProject($Chain_ProjectName)\r\n$deploymentContext.SetChannel($Chain_Channel)\r\nWrite-Host \"`t$Chain_BaseUrl$($deploymentContext.Project.Links.Web)\"\r\n\r\nif ($Chain_CreateOption -ieq 'True') {\r\n    $deploymentContext.CreateRelease($Chain_ReleaseNum)\r\n}\r\nelse {\r\n    $deploymentContext.SetRelease($Chain_ReleaseNum)\r\n}\r\nWrite-Host \"`t$Chain_BaseUrl$($deploymentContext.Release.Links.Web)\"\r\nif ($Chain_SnapshotVariables -ieq 'True') {\r\n    $deploymentContext.UpdateVariableSnapshot()\r\n}\r\n\r\nShow-Heading 'Configuring Deployment'\r\n$deploymentContext.GetDeploymentTemplate()\r\n$email = if (Test-String $OctopusParameters['Octopus.Deployment.CreatedBy.EmailAddress']) { \"($($OctopusParameters['Octopus.Deployment.CreatedBy.EmailAddress']))\" }\r\n$guidedFailureMessage = Get-OctopusSetting GuidedFailureMessage @\"\r\nAutomatic Failure Guidance will #{GuidedFailureAction} (Failure ###{GuidedFailureActionIndex})\r\nInitiated by $($OctopusParameters['Octopus.Deployment.Name']) of $($OctopusParameters['Octopus.Project.Name']) release $($OctopusParameters['Octopus.Release.Number'])\r\nCreated By: $($OctopusParameters['Octopus.Deployment.CreatedBy.DisplayName']) $email\r\n${Chain_BaseUrl}$($OctopusParameters['Octopus.Web.DeploymentLink'])\r\n\"@\r\n$deploymentContext.SetGuidedFailure($Chain_GuidedFailure, $guidedFailureMessage)\r\n$deploymentContext.SetSchedule($Chain_DeploySchedule)\r\n\r\n$deploymentContext.SetEnvironment($Chain_DeployTo)\r\n$deploymentContext.SetTenants($Chain_Tenants)\r\n\r\n$deploymentControllers = $deploymentContext.GetDeploymentControllers()\r\nif (Test-String $Chain_StepsToSkip) {\r\n    $deploymentControllers | % { $_.SetStepsToSkip($Chain_StepsToSkip) }\r\n}\r\nif (Test-String $Chain_FormValues) {\r\n    $deploymentControllers | % { $_.SetFormValues($Chain_FormValues) }\r\n}\r\n\r\nShow-Heading 'Queue Deployment'\r\nif ($deploymentContext.IsTenanted) {\r\n    Write-Host 'Queueing tenant deployments...'\r\n}\r\nelse {\r\n    Write-Host 'Queueing untenanted deployment...'\r\n}\r\n$deploymentControllers | % Start\r\n\r\nif (!$deploymentContext.WaitForDeployment) {\r\n    Write-Host \"Deployments have been queued, proceeding to the next step...\"\r\n    return\r\n}\r\n\r\nShow-Heading 'Waiting For Deployment'\r\ndo {\r\n    Start-Sleep -Seconds 1\r\n    $tasksStillRunning = $false\r\n    foreach ($deployment in $deploymentControllers) {\r\n        if ($deployment.PollCheck()) {\r\n            $tasksStillRunning = $true\r\n        }\r\n    }\r\n} while ($tasksStillRunning)\r\n\r\nif ($deploymentControllers | % Task | ? FinishedSuccessfully -eq $false) {\r\n    Show-Heading 'Deployment Failed!'\r\n    Write-Fatal (($deploymentControllers | % Task | % ErrorMessage) -join \"`n\")\r\n}\r\nelse {\r\n    Show-Heading 'Deployment Successful!'\r\n}\r\n\r\nif (Test-String $Chain_PostDeploy -ForAbsence) {\r\n    return \r\n}\r\n\r\nShow-Heading 'Post-Deploy Script'\r\n$rawPostDeployScript = Invoke-OctopusApi ('/api/releases/{0}' -f $OctopusParameters['Octopus.Release.Id']) |\r\n    % { Invoke-OctopusApi $_.Links.ProjectDeploymentProcessSnapshot } |\r\n    % Steps | ? Id -eq $OctopusParameters['Octopus.Step.Id'] |\r\n    % Actions | ? Id -eq $OctopusParameters['Octopus.Action.Id'] |\r\n    % { $_.Properties.Chain_PostDeploy }\r\nWrite-Verbose \"Raw Post-Deploy Script:`n$rawPostDeployScript\"\r\n\r\nAdd-Type -Path (Get-WmiObject Win32_Process | ? ProcessId -eq $PID | % { Get-Process -Id $_.ParentProcessId } | % { Join-Path (Split-Path -Path $_.Path -Parent) 'Octostache.dll' })\r\n\r\n$deploymentControllers | % {\r\n    $deployment = $_.Task.Deployment\r\n    $tenant = $_.Tenant\r\n    $variablesDictionary = [Octostache.VariableDictionary]::new()\r\n    Invoke-OctopusApi ('/api/variables/{0}' -f $deployment.ManifestVariableSetId) | % Variables | ? {\r\n        ($_.IsSensitive -eq $false) -and `\r\n        ($_.Scope.Private -ne 'True') -and `\r\n\t\t($null -eq $_.Scope.Action) -and `\r\n\t\t($null -eq $_.Scope.Machine) -and `\r\n        ($null -eq $_.Scope.TargetRole) -and `\r\n\t\t($null -eq $_.Scope.Role) -and `\r\n        ($null -eq $_.Scope.Tenant -or $_.Scope.Tenant -contains $tenant.Id) -and `\r\n\t\t($null -eq $_.Scope.TenantTag -or (Compare-Object $_.Scope.TenantTag $tenant.TenantTags -ExcludeDifferent -IncludeEqual)) -and `\r\n        ($null -eq $_.Scope.Environment -or $_.Scope.Environment -contains $deployment.EnvironmentId) -and `\r\n\t\t($null -eq $_.Scope.Channel -or $_.Scope.Channel -contains $deployment.ChannelId) -and `\r\n\t\t($null -eq $_.Scope.Project -or $_.Scope.Project -contains $deployment.ProjectId)\r\n    } | % { $variablesDictionary.Set($_.Name, $_.Value) }\r\n    $postDeployScript = $variablesDictionary.Evaluate($rawPostDeployScript)\r\n    Write-Host \"$($_.LogPrefix)Evaluated Post-Deploy Script:\"\r\n    Write-Host $postDeployScript\r\n    Write-Host \"Script output:\"\r\n    [scriptblock]::Create($postDeployScript).Invoke()\r\n}\r\n",
        "Octopus.Action.Script.ScriptFileName": null,
        "Octopus.Action.Package.FeedId": null,
        "Octopus.Action.Package.PackageId": null
    },
    "Parameters": [{
            "Id": "61bffab9-bb89-4107-a5e0-79d69eaf8f2a",
            "Name": "Chain_ApiKey",
            "Label": "API Key",
            "HelpText": "An Octopus API Key with appropriate permissions to perform the deployment",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            },
            "Links": {}
        },
        {
            "Id": "a37cac4d-8fd3-4d58-bfda-45a436be8dd5",
            "Name": "Chain_ProjectName",
            "Label": "Project Name",
            "HelpText": "Name of the Octopus project that should be deployed",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            },
            "Links": {}
        },
        {
            "Id": "4fd440af-70fe-41ca-bec3-074f05155e81",
            "Name": "Chain_Channel",
            "Label": "Channel Name",
            "HelpText": "The project channel to use when finding or [creating](https://octopus.com/docs/key-concepts/projects/channels#Channels-CreatingReleases) the release to deploy\n\n_Leave blank to use the default channel_",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            },
            "Links": {}
        },
        {
            "Id": "78739052-438d-4dc7-862a-d4567eafc5df",
            "Name": "Chain_ReleaseNum",
            "Label": "Release Number",
            "HelpText": "Release number to use for the deployment\n\n_Leave blank to use the latest release in the channel_",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            },
            "Links": {}
        },
        {
            "Id": "fd2c3474-7187-4356-aaec-96f4910bb9c5",
            "Name": "Chain_CreateOption",
            "Label": "Create new release?",
            "HelpText": "If a release should be created as part of this deployment\n\n\nThe release is created using either the **Release Number** if specified, or from the project release version template / donor package step if not specified\n\nA release will not be created if it is found to already exist",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            },
            "Links": {}
        },
        {
            "Id": "f648fa0c-b271-4e4a-b4f2-7a88db6b605c",
            "Name": "Chain_SnapshotVariables",
            "Label": "Update Variable Snapshot?",
            "HelpText": "Should variables in the release be updated before deploying?\n\nBy updating the variables, the current snapshot will be discarded, and the latest variables (as seen on the Variables tab) will be imported",
            "DefaultValue": "False",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            },
            "Links": {}
        },
        {
            "Id": "80634b3b-3171-4643-b164-a5077c6d387b",
            "Name": "Chain_DeployTo",
            "Label": "Environment Name",
            "HelpText": "The name of an environment to deploy to\n\nMultiple environments can be deployed to by entering the name of a [lifecycle phase](https://octopus.com/docs/key-concepts/lifecycles#Lifecycles-LifecyclePhases)",
            "DefaultValue": "#{Octopus.Environment.Name}",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            },
            "Links": {}
        },
        {
            "Id": "1334093d-0be4-4115-bb93-d752171a19d8",
            "Name": "Chain_Tenants",
            "Label": "Tenants",
            "HelpText": "_Leave blank to perform an untenanted deployment_\n\nA list of [tenants & tenant tags](https://octopus.com/docs/key-concepts/tenants) to deploy. Tenant Tags are specified in [Canonical Name](https://octopus.com/docs/key-concepts/tenants/tenant-tags#TenantTags-Referencingtenanttags) format:\n\n    Tag Set Name/Tag Name\n\nIndividual tenants can be listed in addition to tags\n\n    Tenant Name",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "MultiLineText"
            },
            "Links": {}
        },
        {
            "Id": "83d9d973-7a72-4f71-a890-8f19d955bc37",
            "Name": "Chain_FormValues",
            "Label": "Form Values",
            "HelpText": "Provide values for [prompted variables](https://octopus.com/docs/deploying-applications/variables/prompted-variables) to use in the deployment\n\nVariables should be listed one per line using the format\n\n    VariableName = Value",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "MultiLineText"
            },
            "Links": {}
        },
        {
            "Id": "6522ca29-898a-4da6-b0c3-da52991e6812",
            "Name": "Chain_StepsToSkip",
            "Label": "Steps To Skip",
            "HelpText": "A list of steps which should be skipped in the deployment\n\nSteps should be listed one per line, and specified using either the step number (as per the deployment plan) or by the step name",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "MultiLineText"
            },
            "Links": {}
        },
        {
            "Id": "acb2cd0e-fc53-42a7-95da-089955ea1870",
            "Name": "Chain_GuidedFailure",
            "Label": "Failure Handling",
            "HelpText": "Determines how deployment failures & [guided failure mode](https://octopus.com/docs/deploying-applications/guided-failures) should be handled for the deployment\n\nAutomatic failure handling is performed by using [guided failure](https://octopus.com/docs/deploying-applications/guided-failures) and submitting an appropriate action\n\nThe number of retry attempts can be customised by [setting the following variables in indexer notion](https://octopus.com/docs/deploying-applications/variables/system-variables#Systemvariables-Action)\n- Octopus.Action.StepRetryCount\n- Octopus.Action.DeploymentRetryCount",
            "DefaultValue": "Default",
            "DisplaySettings": {
                "Octopus.ControlType": "Select",
                "Octopus.SelectOptions": "Default|Default - Guided Failure is inherited from this deployment\nEnabled|Enable - Guided Failure is enabled\nDisabled|Disable - Guided Failure is disabled\nRetryIgnore|Retry & Ignore - Automatically retry a failing step, a second failure is ignored\nRetryAbort|Retry & Abort - Automatically retry a failing step, and abort on a second failure\nIgnore|Ignore - Automatically ignore any step failures\nRetryDeployment|Retry Deployment - Automatically retry the entire deployment on failure"
            },
            "Links": {}
        },
        {
            "Id": "73a80735-4ca0-4c12-9fa3-f0123db6349f",
            "Name": "Chain_DeploySchedule",
            "Label": "Scheduling",
            "HelpText": "Defines how the deployment should be scheduled & run\n\n_Note: Automated failure handling & post-deploy script functionality is only available when the **Wait For Deployment** option is selected_\n\nA user defined schedule can be set with the **Use a custom expression** option\nFor an exact date & time use the following format, the day is optional and the time is in 24-hour format\n\n    [Mon/Tue/Wed/Thu/Fri/Sat/Sun] @ HH:MM\n\nTo schedule a deployment a relative number of hours & minutes in the future use\n\n    + MMM\n    + HHH:MM\n\n_Note: Reoccurring deployments & automatic retry of failed deployment are possible using a scheduled deployment and the [Always Run or On Failure run conditions](https://octopus.com/docs/deploying-applications#Deployingapplications-Conditions)_",
            "DefaultValue": "WaitForDeployment",
            "DisplaySettings": {
                "Octopus.ControlType": "Select",
                "Octopus.SelectOptions": "WaitForDeployment|Wait For Deployment\nNoWait|Queue Immediately\n+ 5|Deploy in 5 minutes\n+ 15|Deploy in 15 minutes\n+ 1:00|Deploy in 1 hour\n+ 24:00|Deploy in 24 hours\n@ 00:00|Deploy At Midnight\n@ 00:00 + 12:00|Deploy At Noon Tomorrow\nMon @ 08:00|Deploy At 8am On Monday\nSat @ 00:00 + 168:00|Deploy the following Saturday at Midnight"
            },
            "Links": {}
        },
        {
            "Id": "7e7f9ac5-8674-4a91-a94a-896a3ee1334d",
            "Name": "Chain_PostDeploy",
            "Label": "Post-Deploy Script",
            "HelpText": "A PowerShell script which should be run after a successful deployment\n\nVariables are replaced in the script using the resultant **Manifest VariableSet** from the deployment in the [binding syntax](https://octopus.com/docs/deploying-applications/variables/binding-syntax) format\n\nVariables are not available if they are:\n- [Sensitive](https://octopus.com/docs/deploying-applications/variables/sensitive-variables)\n- Action scoped\n- Machine scoped\n- Role scoped\n\n\nWhen performing a tenanted deployment the script will be run once for each tenant using the specific variables from their deployment",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "MultiLineText"
            },
            "Links": {}
        }
    ],
    "LastModifiedBy": "paulmarsy",
    "$Meta": {
        "ExportedAt": "2017-05-02T11:02:16.120Z",
        "OctopusVersion": "3.12.8",
        "Type": "ActionTemplate"
    },
    "Category": "octopus"
}
